type: edu
files:
- name: src/Task.kt
  visible: true
  placeholders:
  - offset: 232
    length: 0
    placeholder_text: ""
    initial_state:
      length: 0
      offset: 232
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: |-
      private fun getPercentage(productsCart: Set<String>, groceryCart: Set<String>) =
        100.0 * (productsCart intersect groceryCart).size / groceryCart.size
  - offset: 288
    length: 6
    placeholder_text: TODO()
    initial_state:
      length: 6
      offset: 288
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: getPercentage(meats, groceryCart)
  - offset: 351
    length: 6
    placeholder_text: TODO()
    initial_state:
      length: 6
      offset: 351
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: getPercentage(fruits, groceryCart)
  - offset: 416
    length: 6
    placeholder_text: TODO()
    initial_state:
      length: 6
      offset: 416
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: getPercentage(vegetables, groceryCart)
  - offset: 479
    length: 6
    placeholder_text: TODO()
    initial_state:
      length: 6
      offset: 479
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: 100.0 * (groceryCart - meats - fruits - vegetables).size
      / groceryCart.size
  text: |-
    package setsExercise3

    import atomictest.eq

    val meats = setOf("beef", "chicken")
    val fruits = setOf("apple", "orange", "banana", "kiwi")
    val vegetables = setOf("beans", "peas", "carrots", "sweet potatoes", "asparagus", "spinach")



    fun percentMeat(groceryCart: Set<String>): Double =
      TODO()

    fun percentFruit(groceryCart: Set<String>): Double =
      TODO()

    fun percentVeggies(groceryCart: Set<String>): Double =
      TODO()

    fun percentOther(groceryCart: Set<String>): Double =
      TODO()

    fun main() {
      val groceryCart = setOf("apple", "pretzels", "bread", "orange", "beef",
        "beans", "asparagus", "sweet potatoes", "spinach", "carrots")

      percentMeat(groceryCart) eq 10.0
      percentFruit(groceryCart) eq 20.0
      percentVeggies(groceryCart) eq 50.0
      percentOther(groceryCart) eq 20.0
    }
  learner_created: false
- name: test/Tests.kt
  visible: false
  text: |-
    package setsExercise3

    import org.junit.Assert
    import org.junit.FixMethodOrder
    import org.junit.Test
    import org.junit.runners.MethodSorters
    import util.TIMEOUT

    @FixMethodOrder(MethodSorters.NAME_ASCENDING)
    class TestSetsExercise3 {
      private fun checkPercentage(
        percentage: Double,
        groceryCart: Set<String>,
        percentFunction: (Set<String>) -> Double,
        functionName: String
      ) {
        Assert.assertEquals("$functionName is wrong for $groceryCart", percentage, percentFunction(groceryCart), 0.000000001)
      }

      private fun checkMeatPercentage(percentage: Double, groceryCart: Set<String>) {
        checkPercentage(percentage, groceryCart, ::percentMeat, "percentMeat")
      }

      private fun checkFruitPercentage(percentage: Double, groceryCart: Set<String>) {
        checkPercentage(percentage, groceryCart, ::percentFruit, "percentFruit")
      }

      private fun checkVeggiesPercentage(percentage: Double, groceryCart: Set<String>) {
        checkPercentage(percentage, groceryCart, ::percentVeggies, "percentVeggies")
      }

      private fun checkOtherPercentage(percentage: Double, groceryCart: Set<String>) {
        checkPercentage(percentage, groceryCart, ::percentOther, "percentOther")
      }

      @Test(timeout = TIMEOUT)
      fun test1Sample() {
        val groceryCart = setOf("apple", "pretzels", "bread", "orange", "beef",
          "beans", "asparagus", "sweet potatoes", "spinach", "carrots")

        checkMeatPercentage(10.0, groceryCart)
        checkFruitPercentage(20.0, groceryCart)
        checkVeggiesPercentage(50.0, groceryCart)
        checkOtherPercentage(20.0, groceryCart)
      }

      @Test(timeout = TIMEOUT)
      fun test2Trivial() {
        val groceryCart = setOf("beef", "apple", "beans", "beer")

        checkMeatPercentage(25.0, groceryCart)
        checkFruitPercentage(25.0, groceryCart)
        checkVeggiesPercentage(25.0, groceryCart)
        checkOtherPercentage(25.0, groceryCart)
      }

      @Test(timeout = TIMEOUT)
      fun test3Another() {
        val groceryCart = setOf("apple", "orange", "kiwi",
          "sweet potatoes", "asparagus", "spinach", "buckwheat", "condensed milk")
        checkMeatPercentage(0.0, groceryCart)
        checkFruitPercentage(37.5, groceryCart)
        checkVeggiesPercentage(37.5, groceryCart)
        checkOtherPercentage(25.0, groceryCart)
      }
    }
  learner_created: false
feedback_link: |
  https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&entry.189755027=Introduction+to+Objects+%2F+Sets+%2F+Exercise1
status: Unchecked
record: -1
