type: edu
files:
- name: src/Task.kt
  visible: true
  placeholders:
  - offset: 69
    length: 19
    placeholder_text: // private val list
    initial_state:
      length: 19
      offset: 69
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: private val list = mutableListOf<E>()
  - offset: 113
    length: 6
    placeholder_text: TODO()
    initial_state:
      length: 6
      offset: 113
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: list += e
  - offset: 142
    length: 6
    placeholder_text: TODO()
    initial_state:
      length: 6
      offset: 142
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: list.removeAt(list.lastIndex)
  - offset: 208
    length: 25
    placeholder_text: // private val arrayDeque
    initial_state:
      length: 25
      offset: 208
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: private val arrayDeque = ArrayDeque<E>()
  - offset: 257
    length: 6
    placeholder_text: TODO()
    initial_state:
      length: 6
      offset: 257
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: arrayDeque.addLast(e)
  - offset: 287
    length: 6
    placeholder_text: TODO()
    initial_state:
      length: 6
      offset: 287
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: arrayDeque.removeFirst()
  text: |-
    package compositionExercise3
    import atomictest.*

    class Stack<E> {
      // private val list

      fun push(e: E) {
        TODO()
      }

      fun pop(): E = TODO()
    }

    @OptIn(ExperimentalStdlibApi::class)
    class Queue<E> {
      // private val arrayDeque

      fun add(e: E) {
        TODO()
      }

      fun poll(): E = TODO()
    }

    fun main() {
      val stack = Stack<Int>()
      stack.push(1)
      stack.push(2)
      stack.push(3)
      stack.push(4)
      stack.pop() eq 4
      stack.pop() eq 3

      val queue = Queue<String>()
      queue.add("a")
      queue.add("b")
      queue.add("c")
      queue.add("d")
      queue.poll() eq "a"
      queue.poll() eq "b"
    }
  learner_created: false
- name: test/Tests.kt
  visible: false
  text: |-
    package compositionExercise3

    import org.junit.FixMethodOrder
    import org.junit.Test
    import org.junit.runners.MethodSorters
    import util.*
    import kotlin.reflect.full.createInstance
    import kotlin.test.assertEquals

    @FixMethodOrder(MethodSorters.NAME_ASCENDING)
    class TestCompositionExercise3 {

        private val packageName = "compositionExercise3"

        @Test
        fun `#01 stack structure`() {
            loadClass(packageName, "Stack").apply {
                assertConstructorNumber(1)
                assertParametersOfFirstConstructor()
                assertMemberFunction("push")
                assertMemberFunction("pop")
                assertNoMemberFunction("get")
            }
        }

        @Test
        fun `#02 stack functioning`() {
            val stackClass = loadClass(packageName, "Stack")
            val stack = stackClass.createInstance()
            val push = loadMemberFunction(stackClass, "push")
            val pop = loadMemberFunction(stackClass, "pop")
            push.call(stack, 1)
            push.call(stack, 2)
            push.call(stack, 3)
            push.call(stack, 4)
            assertEquals(
                message = "First call of pop() in {1, 2, 3, 4} stack should return 4",
                expected = 4,
                actual = pop.call(stack)
            )
            assertEquals(
                message = "Second call of pop() in {1, 2, 3, 4} stack should return 3",
                expected = 3,
                actual = pop.call(stack)
            )
        }

        @Test
        fun `#03 queue structure`() {
            loadClass(packageName, "Queue").apply {
                assertConstructorNumber(1)
                assertParametersOfFirstConstructor()
                assertMemberFunction("add")
                assertMemberFunction("poll")
                assertNoMemberFunction("get")
            }
        }

        @Test
        fun `#04 queue functioning`() {
            val queueClass = loadClass(packageName, "Queue")
            val queue = queueClass.createInstance()
            val add = loadMemberFunction(queueClass, "add")
            val poll = loadMemberFunction(queueClass, "poll")
            add.call(queue, "a")
            add.call(queue, "b")
            add.call(queue, "c")
            add.call(queue, "d")
            assertEquals(
                message = "First call of poll() in {'a','b','c','d'} queue should return 'a'",
                expected = "a",
                actual = poll.call(queue))
            assertEquals(
                message = "Second call of poll() in {'a','b','c','d'} queue should return 'b'",
                expected = "b",
                actual = poll.call(queue)
            )
        }
    }
  learner_created: false
status: Unchecked
record: -1
