type: theory
files:
- name: src/WithSecondary.kt
  visible: true
  text: |-
    // SecondaryConstructors/WithSecondary.kt
    package secondaryconstructors

    class WithSecondary(i: Int) {
      init {
        println("Primary: $i")
      }

      constructor(c: Char) : this(c - 'A') {
        println("Secondary: '$c'")
      }

      constructor(s: String) :
        this(s.first()) {                // [1]
        println("Secondary: \"$s\"")
      }
      /* Doesn't compile without a call
         to the primary constructor:
      constructor(f: Float) {            // [2]
        println("Secondary: $f")
      }
      */
    }

    fun main() {
      fun sep() = println("-".repeat(10))
      WithSecondary(1)
      sep()
      WithSecondary('D')
      sep()
      WithSecondary("Last Constructor")
    }
    /* Output:
    Primary: 1
    ----------
    Primary: 3
    Secondary: 'D'
    ----------
    Primary: 11
    Secondary: 'L'
    Secondary: "Last Constructor"
    */
  learner_created: false
- name: src/GardenItem.kt
  visible: true
  text: |-
    // SecondaryConstructors/GardenItem.kt
    package secondaryconstructors
    import atomictest.eq
    import secondaryconstructors.Material.*

    enum class Material {
      Ceramic, Metal, Plastic
    }

    class GardenItem(val name: String) {
      var material: Material = Plastic
      constructor(
        name: String, material: Material     // [1]
      ) : this(name) {                       // [2]
        this.material = material             // [3]
      }
      constructor(
        material: Material
      ) : this("Strange Thing", material)    // [4]
      override fun toString() = "$material $name"
    }

    fun main() {
      GardenItem("Elf").material eq Plastic
      GardenItem("Snowman").name eq "Snowman"
      GardenItem("Gazing Ball", Metal) eq    // [5]
        "Metal Gazing Ball"
      GardenItem(material = Ceramic) eq
        "Ceramic Strange Thing"
    }
  learner_created: false
status: Unchecked
record: -1
post_submission_on_open: true
