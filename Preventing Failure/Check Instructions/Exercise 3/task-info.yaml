type: edu
files:
- name: src/Task.kt
  visible: true
  placeholders:
  - offset: 103
    length: 19
    placeholder_text: // TODO class Level
    initial_state:
      length: 19
      offset: 103
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: |-
      class Level(
        val range: IntRange,
        private var level: Int = range.first
      ) {
        init {
          require(level in range) {
            "Initial level out of range: $level"
          }
        }
        val value: Int
          get() = level
        fun up(): Int {
          if (level + 1 in range)
            level++
          return level
        }
        fun down(): Int {
          if (level - 1 in range)
            level--
          return level
        }
        fun set(new: Int) {
          require(new in range) {
            "set() argument out of range: $new"
          }
          level = new
        }
      }
  - offset: 137
    length: 392
    placeholder_text: |-
      /*
        val level = Level(1..10)
        println(capture { level.set(0) })
        println(capture { level.set(11) })
        println(capture { Level(1..10, -1) })
        println(capture { Level(1..10, 42) })
        fun testUp() =
          println("${level.value}, ${level.up()}")
        fun testDown() =
          println("${level.value}, ${level.down()}")
        testUp()
        testDown()
        level.set(10)
        testUp()
        level.set(1)
        testDown()
      */
    initial_state:
      length: 392
      offset: 137
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: |2-
        val level = Level(1..10)
        println(capture { level.set(0) })
        println(capture { level.set(11) })
        println(capture { Level(1..10, -1) })
        println(capture { Level(1..10, 42) })
        fun testUp() =
          println("${level.value}, ${level.up()}")
        fun testDown() =
          println("${level.value}, ${level.down()}")
        testUp()
        testDown()
        level.set(10)
        testUp()
        level.set(1)
        testDown()
  text: |-
    // CheckInstructions/CheckInstructionsSoln3.kt
    package checkInstructionsExercise3
    import atomictest.*

    // TODO class Level

    fun main() {
    /*
      val level = Level(1..10)
      println(capture { level.set(0) })
      println(capture { level.set(11) })
      println(capture { Level(1..10, -1) })
      println(capture { Level(1..10, 42) })
      fun testUp() =
        println("${level.value}, ${level.up()}")
      fun testDown() =
        println("${level.value}, ${level.down()}")
      testUp()
      testDown()
      level.set(10)
      testUp()
      level.set(1)
      testDown()
    */
    }
    /* Output:
    IllegalArgumentException: set() argument out of range: 0
    IllegalArgumentException: set() argument out of range: 11
    IllegalArgumentException: Initial level out of range: -1
    IllegalArgumentException: Initial level out of range: 42
    1, 2
    2, 1
    10, 10
    1, 1
     */
  learner_created: false
- name: test/Tests.kt
  visible: false
  text: |-
    package checkInstructionsExercise3

    import org.junit.Test
    import util.unimplementedTest

    class TestCheckInstructionsExercise3 {
        @Test fun testSolution() {
            unimplementedTest()
        }
    }
  learner_created: false
status: Unchecked
record: -1
