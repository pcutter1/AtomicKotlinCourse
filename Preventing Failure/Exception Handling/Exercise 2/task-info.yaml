type: edu
files:
- name: src/Task.kt
  visible: true
  placeholders:
  - offset: 576
    length: 6
    placeholder_text: TODO()
    initial_state:
      length: 6
      offset: 576
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: |-
      try {
          println(embedNumber(
            convertNumber(
              findNumber(s))))
        } catch (e: NumberFail) {
          println("$e")
        }
  - offset: 613
    length: 6
    placeholder_text: TODO()
    initial_state:
      length: 6
      offset: 613
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: |-
      val ns: String = try {
          findNumber(s)
        } catch (e: NoNumber) {
          "0"
        }
        val n: Int = try {
          convertNumber(ns)
        } catch (e: BadNumber) {
          -1
        }
        println(embedNumber(n))
  text: |-
    // ExceptionHandling/ExceptHandlingSoln2.kt
    package exceptionHandlingExercise2

    open class NumberFail : Exception()
    open class NoNumber : NumberFail()
    open class BadNumber : NumberFail()

    fun findNumber(s: String): String {
      var result = ""
      for (c in s)
        if (c in "0123456789.-")
          result += c
        else if (result.isNotEmpty())
          return result
      throw NoNumber()
    }

    fun convertNumber(s: String): Int =
      try {
        s.toInt()
      } catch (e: NumberFormatException) {
        throw BadNumber()
      }

    fun embedNumber(n: Int) = "AbCdE${n}fGhIj"

    fun justFail(s: String) {
      TODO()
    }

    fun recover(s: String) {
      TODO()
    }

    fun test(s: String) {
      println("justFail($s)")
      justFail(s)
      println("recover($s)")
      recover(s)
    }

    fun main() {
      test("The13thFloor9")
      test("NoDigitsHere")
      test("negative-11int")
      test("A float: 3.14159 (pi)")
    }

    /* Output:
    justFail(The13thFloor9)
    AbCdE13fGhIj
    recover(The13thFloor9)
    AbCdE13fGhIj
    justFail(NoDigitsHere)
    exceptionHandlingExercise2.NoNumber
    recover(NoDigitsHere)
    AbCdE0fGhIj
    justFail(negative-11int)
    AbCdE-11fGhIj
    recover(negative-11int)
    AbCdE-11fGhIj
    justFail(A float: 3.14159 (pi))
    exceptionHandlingExercise2.BadNumber
    recover(A float: 3.14159 (pi))
    AbCdE-1fGhIj
     */
  learner_created: false
- name: test/Tests.kt
  visible: false
  text: |-
    package exceptionHandlingExercise2

    import org.junit.Test
    import util.unimplementedTest

    class TestExceptionHandlingExercise2 {
        @Test fun testSolution() {
            unimplementedTest()
        }
    }
  learner_created: false
status: Unchecked
record: -1
