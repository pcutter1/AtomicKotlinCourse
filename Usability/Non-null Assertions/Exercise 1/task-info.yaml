type: edu
files:
- name: src/Task.kt
  visible: true
  placeholders:
  - offset: 36
    length: 12
    placeholder_text: class Rocket
    initial_state:
      length: 12
      offset: 36
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: |-
      class Rocket {
        fun ignition() {
          println("Liftoff!")
        }
      }
  - offset: 50
    length: 15
    placeholder_text: fun launch() {}
    initial_state:
      length: 15
      offset: 50
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: |-
      fun launch(rocket: Rocket?) {
        rocket!!.ignition()
      }
  text: |-
    package nonNullAssertionsExercise1

    class Rocket

    fun launch() {}

    fun main() {
    /*
      val rocket = Rocket()
      launch(rocket)
      // throws exception:
      // launch(null)
    */
    }
  learner_created: false
- name: test/Tests.kt
  visible: false
  text: |-
    package nonNullAssertionsExercise1

    import org.junit.Assert
    import org.junit.Test
    import util.checkParametersOfMemberFunction
    import util.checkParametersOfTopLevelFunction
    import util.loadMemberFunction
    import util.runAndCheckSystemOutput
    import java.lang.reflect.InvocationTargetException
    import kotlin.reflect.full.createInstance

    class TestNonNullAssertionsExercise1 {
        @Test fun testRocket() {
            val rocketClass = Rocket::class
            val rocketInstance = rocketClass.createInstance()
            val ignitionFunc = loadMemberFunction(rocketClass, "ignition")
            checkParametersOfMemberFunction(ignitionFunc, listOf())
            runAndCheckSystemOutput("Wrong output after calling 'rocket.ignition()'", "Liftoff!") {
                ignitionFunc.call(rocketInstance)
            }
            val launchFunc = ::launch
            checkParametersOfTopLevelFunction(launchFunc, listOf("rocket" to "nonNullAssertionsExercise1.Rocket?"))
            runAndCheckSystemOutput("Wrong output after calling 'launch(rocket)'", "Liftoff!") {
                launchFunc.call(rocketInstance)
            }
            try {
                launchFunc.call(null)
                throw AssertionError("Wrong result after calling 'launch(null)', expected NullPointerException")
            } catch (e: InvocationTargetException) {
                Assert.assertEquals("Wrong result after calling 'launch(null)', expected NullPointerException",
                  e.targetException::class.simpleName, "NullPointerException")
            }
        }
    }
  learner_created: false
status: Unchecked
record: -1
