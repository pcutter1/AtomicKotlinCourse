type: output
files:
- name: src/Task.kt
  visible: true
  placeholders:
  - offset: 57
    length: 6
    placeholder_text: TODO()
    initial_state:
      length: 6
      offset: 57
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: |-
      var sum = 0
        while (true) {
          val input = readLine()
          val number = input?.toIntOrNull()
          if (number == null) {
            println("Not a number: $input")
          } else {
            sum += number
          }
          if (number == 0) break
        }
        println("Sum: $sum")
  text: |-
    package breakAndContinueExercise1

    fun readNumbers() {
      TODO()
    }

    fun main() {
      readNumbers()
    }
    /* Input/Output:
    >>> 1
    >>> a
    Not a number: a
    >>> 3
    >>> 10
    >>> 0
    Sum: 14
     */
  learner_created: false
- name: test/Tests.kt
  visible: false
  text: |-
    package breakAndContinueExercise1

    import org.junit.FixMethodOrder
    import org.junit.Test
    import org.junit.runners.MethodSorters
    import util.TIMEOUT
    import util.checkInputOutput

    @FixMethodOrder(MethodSorters.NAME_ASCENDING)
    class TestBreakAndContinueExercise1 {
      private fun testInput(input: String, expectedOutput: String) {
        checkInputOutput("Wrong output for input:\n$input\n", input, expectedOutput, ::readNumbers)
      }

      @Test(timeout = TIMEOUT)
      fun test1() = testInput("1\n0", "Sum: 1")

      @Test(timeout = TIMEOUT)
      fun test2() = testInput("af\n1\n0", "Not a number: af\nSum: 1")

      @Test(timeout = TIMEOUT)
      fun test3() = testInput("1\n9\n5\n0", "Sum: 15")
    }
  learner_created: false
status: Unchecked
record: -1
